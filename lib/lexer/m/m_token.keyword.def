
    TOKEN_PATTERN(0, INDENT, 0),
    TOKEN_PATTERN(0, DEDENT, 0),
    KEYWORD_PATTERN_STYLE("#", "#", PYCOMMENT, "pycomment"),
    KEYWORD_PATTERN_STYLE("//", "//", LINECOMMENT, "comment"),
    KEYWORD_PATTERN_STYLE("/*", "/\\*", BLOCKCOMMENT, "block-comment"),

    KEYWORD_PATTERN_STYLE("_", "_", WILDCARD, "variable"), // 10

    TOKEN_PATTERN("\n", NEWLINE, 0),
    TOKEN_PATTERN("[0-9]+|0x[0-9a-fA-F]+", LITERAL_INT, "number"), // 5
    TOKEN_PATTERN("([0-9]*.)?[0-9]+", LITERAL_FLOAT, "number"),
    TOKEN_PATTERN("([0-9]*.)?[0-9]+ \\+ ([0-9]*.)?[0-9]*i", LITERAL_COMPLEX, "number"),
    TOKEN_PATTERN(0, LITERAL_CHAR, "string"),
    TOKEN_PATTERN(0, LITERAL_STRING, "string"),

    KEYWORD_PATTERN("from", FROM), 
    KEYWORD_PATTERN("memory", MEMORY),
    KEYWORD_PATTERN("extern", EXTERN), 

    //WIT items
    KEYWORD_PATTERN("None", NONE), 
    KEYWORD_PATTERN("bool", TYPE_BOOL), 
    KEYWORD_PATTERN("int", TYPE_INT), 
    KEYWORD_PATTERN("u8", TYPE_U8), 
    KEYWORD_PATTERN("u16", TYPE_U16), 
    KEYWORD_PATTERN("u32", TYPE_U32), 
    KEYWORD_PATTERN("u64", TYPE_U64), 
    KEYWORD_PATTERN("i8", TYPE_I8), 
    KEYWORD_PATTERN("i16", TYPE_I16), 
    KEYWORD_PATTERN("i32", TYPE_I32), 
    KEYWORD_PATTERN("i64", TYPE_I64), 
    KEYWORD_PATTERN("f32", TYPE_F32), 
    KEYWORD_PATTERN("f64", TYPE_F64), 
    KEYWORD_PATTERN("char", TYPE_CHAR), 
    KEYWORD_PATTERN("string", TYPE_STRING), 
    
    KEYWORD_PATTERN("use", USE), 
    KEYWORD_PATTERN("type", TYPE),
    KEYWORD_PATTERN("resource", RESOURCE), 
    KEYWORD_PATTERN("func", FUN),
    KEYWORD_PATTERN("struct", STRUCT),
    KEYWORD_PATTERN("record", RECORD),
    KEYWORD_PATTERN("enum", ENUM),
    KEYWORD_PATTERN("flags", FLAGS),
    KEYWORD_PATTERN("variant", VARIANT),
    KEYWORD_PATTERN("union", UNION),
    KEYWORD_PATTERN("option", OPTION),
    KEYWORD_PATTERN("list", LIST),
    KEYWORD_PATTERN("result", RESULT),
    KEYWORD_PATTERN("as", AS),
    KEYWORD_PATTERN("static", STATIC),
    KEYWORD_PATTERN("interface", INTERFACE),
    KEYWORD_PATTERN("world", WORLD),
    KEYWORD_PATTERN("tuple", TUPLE),
    KEYWORD_PATTERN("future", FUTURE),
    KEYWORD_PATTERN("stream", STREAM),
    KEYWORD_PATTERN("import", IMPORT),
    KEYWORD_PATTERN("export", EXPORT),
    KEYWORD_PATTERN("package", PACKAGE),
    KEYWORD_PATTERN("include", INCLUDE),
    KEYWORD_PATTERN("class", CLASS),
    KEYWORD_PATTERN("borrow", BORROW),
    KEYWORD_PATTERN("default", DEFAULT),

    KEYWORD_PATTERN("def", DEF),
    KEYWORD_PATTERN("let", LET),
    KEYWORD_PATTERN("mut", MUT),
    KEYWORD_PATTERN("->", MAPTO),
    KEYWORD_PATTERN("if", IF),
    KEYWORD_PATTERN("elif", ELIF),
    KEYWORD_PATTERN("else", ELSE), // 15

    KEYWORD_PATTERN("True", TRUE),
    KEYWORD_PATTERN("False", FALSE),
    KEYWORD_PATTERN("in", IN),
    KEYWORD_PATTERN("for", FOR),
    KEYWORD_PATTERN("while", WHILE),
    KEYWORD_PATTERN("break", BREAK),
    KEYWORD_PATTERN("continue", CONTINUE),
    KEYWORD_PATTERN("return", RETURN),
    KEYWORD_PATTERN("constructor", CONSTRUCTOR),

    KEYWORD_PATTERN("match", MATCH),
    KEYWORD_PATTERN("with", WITH),
    KEYWORD_PATTERN("when", WHEN),
    
    KEYWORD_PATTERN("new", NEW),
    KEYWORD_PATTERN("del", DEL),

    /*reserved keywords*/
    KEYWORD_PATTERN("yield", YIELD),
    KEYWORD_PATTERN("async", ASYNC),
    KEYWORD_PATTERN("await", AWAIT),

    TOKEN_PATTERN("[_a-zA-Z][_a-zA-Z0-9]*", IDENT, 0), //

    //operators
    NAME_KEYWORD_PATTERN("(", "\\(", LPAREN),
    NAME_KEYWORD_PATTERN(")", "\\)", RPAREN),
    NAME_KEYWORD_PATTERN("[", "\\[", LBRACKET),
    NAME_KEYWORD_PATTERN("]", "\\]", RBRACKET),
    KEYWORD_PATTERN("{", LCBRACKET), // 25
    KEYWORD_PATTERN("}", RCBRACKET),

    KEYWORD_PATTERN(",", COMMA),
    KEYWORD_PATTERN(";", SEMICOLON),

    NAME_KEYWORD_PATTERN("..", "\\.\\.", RANGE),
    NAME_KEYWORD_PATTERN("...", "\\.\\.\\.", VARIADIC), // 30
    KEYWORD_PATTERN(":", ISTYPEOF),
