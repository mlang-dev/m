/*
 * grammar for WIT
 * This is the grammar text of WIT (WebAssembly Interface Type) that can be consumed by  
 * our parser generator pgen to produce component and interface ASTs. They can be subsequently
 * used to generate binding code to consume component or produce skeleton code that implements
 * the interfaces.
*/

wit-doc     =   wit-item
            |   wit-doc wit-item

wit-item    =   wit-interface-default | wit-world-default

wit-world-default   =   "default" wit-world
                    |   wit-world

wit-world   =   "world" IDENT '{' world-items '}'

world-items =  world-item
            |  world-items world-item

world-item  =   export-item |  import-item | use-item | typedef-item

export-item =   "export" IDENT ':'  extern-type
import-item =   "import" IDENT ':'  extern-type

extern-type =   func-type | interface-type

interface-type  = "interface" '{' interface-items '}'
                | use-path  

wit-interface-default   =   "default"   wit-interface
                        |   wit-interface

wit-interface   =   "interface" IDENT '{'interface-items '}'

interface-items =   interface-item
                |   interface-items interface-item

interface-item  =   typedef-item | use-item | func-item

typedef-item    =   resource-item
                |   variant-items
                |   record-item
                |   union-items
                |   flags-items
                |   enum-items
                |   type-item

func-item   = IDENT ':' func-type
func-type   = "func" param-list result-list
param-list  = '(' named-type-list ')'

result-list = ""
            | "->" ty
            | "->" '(' named-type-list ')'
            | "->" '(' ')'
named-type-list = named-type
                | named-type-list ',' named-type

named-type = IDENT ':' ty

use-item    = "use" use-path '.' '{' use-names-list '}'

use-names-list  = use-names-item
                | use-names-list ',' use-names-item
use-names-item  =   IDENT
                |   IDENT "as" IDENT
use-path    =   IDENT 
            |   use-path '.' IDENT

type-item   =   "type"  IDENT '=' ty

record-item =   "record" IDENT '{' record-fields '}'

record-fields = record-field
              | record-fields ',' record-field
record-field  = IDENT ':' ty

flags-items  = "flags" IDENT '{' flags-fields '}'

flags-fields = IDENT
               | flags-fields ',' IDENT

variant-items  = "variant" IDENT '{' variant-cases '}'

variant-cases  = variant-case
                | variant-cases ',' variant-case

variant-case  = IDENT
               | IDENT '(' ty ')'

enum-items  = "enum" IDENT '{' enum-cases '}'

enum-cases   = IDENT
             | enum-cases ',' IDENT
union-items = "union" IDENT '{' union-cases '}'

union-cases = ty
            | union-cases ',' ty 
            
ty   = "u8" | "u16" | "u32" | "u64"
     | "s8" | "s16" | "s32" | "s64"
     | "float32" | "float64"
     | "char"
     | "bool"
     | "string"
     | tuple-type
     | list-type
     | option-type
     | result-type
     | handle-type
     | IDENT

tuple-type = "tuple" '<' tuple-list '>'
tuple-list = ty
           | tuple-list ',' ty

list-type = "list" '<' ty '>'

option-type = "option" '<' ty '>'

result-type = "result" '<' ty ',' ty '>'
            | "result" '<' '_' ',' ty '>'
            | "result" '<' ty '>'
            | "result"

handle-type = IDENT
            | "borrow" '<' IDENT '>'
