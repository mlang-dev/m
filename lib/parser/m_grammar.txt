# grammar for mlang
# The right side of each production rule enclosed by curly parentheses is semantic action in 
# generating AST tree when the rule is applied to reduce to left symbol of the grammar rule.

start       = stmts                             { 0 }
block       = NEWLINE INDENT stmts DEDENT       { 2 }
            | stmt                              { block 0 }
stmts       = stmts NEWLINE stmt                { block 0 2 }
            | stmt                              { block 0 }
stmt        = func                              { 0 }
            | type_def                          { 0 }
            | expr                              { 0 }
            | var_decl                          { 0 }
func        = IDENT params '=' block            { func 0 1 3 }
type_def    = "type" IDENT '=' block            { type_def 1 3 }
params      = params param                      { block 0 1 }
            | param                             { block 0 }
            | '(' ')'                           { block }  # empty block
param       = var_decl                          { 0 }
var_decl    = IDENT ':' IDENT                   { var 0 2 } # var name:type
            | IDENT                             { var 0 }   # var name
expr        = expr [+-] term                    { binop 0 1 2 } # lhs op rhs
            | term                              { 0 }
term        = term [*/%] factor                 { binop 0 1 2 } # lhs op rhs
            | factor                            { 0 }
factor      = '(' expr ')'                      { 1 }
            | power                             { 0 }
            | [+-] factor                       { unop 0 1 }
power       = num '^' factor                    { binop 0 1 2 } # lhs op rhs
            | num                               { 0 }
num         = INT                               { 0 }
            | FLOAT                             { 0 }
