name: CMake m

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.8]

    steps:
    - name: Install LLVM & LLD
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo apt-add-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"
        sudo apt-get install llvm-14 lld-14 clang-14 libclang-14-dev liblld-14-dev libmlir-14-dev
        sudo ln /usr/bin/llvm-config-14 /usr/bin/llvm-config
        sudo ln /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
        sudo ln /usr/bin/llvm-nm-14 /usr/bin/llvm-nm
        sudo ln /usr/bin/llvm-ranlib-14 /usr/bin/llvm-ranlib
        sudo ln -f /usr/bin/clang-14 /usr/bin/clang
        sudo ln -f /usr/bin/clang++-14 /usr/bin/clang++
        sudo ln -f /usr/bin/wasm-ld-14 /usr/bin/wasm-ld
        
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build wasi-libc
      run: (cd ${{github.workspace}}/extern/wasi-libc && make)
    - name: download libclang_rt.builtins-wasm32-wasi
      run: | 
        wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-14/libclang_rt.builtins-wasm32-wasi-14.0.tar.gz
        sudo tar xzvf libclang_rt.builtins-wasm32-wasi-14.0.tar.gz
        rm -r -f libclang_rt.builtins-wasm32-wasi-14.0.tar.gz
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build m
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    #use nodes now
    - name: use node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: run npm test 
      run: | 
        cd ${{github.workspace}}
        npm ci
        npm run build --if-present
        CI=true npm test